{"version":3,"sources":["components/iconItem.js","components/resultDialog.js","components/iconGroup.js","App.js","index.js"],"names":["useStyles","makeStyles","root","width","iconAdded","backgroundColor","Icon","margin","height","iconNameArea","padding","iconName","textAlign","fontSize","fontWeight","lineHeight","IconItem","props","icon","uniqueId","addToList","removeFromList","selected","toggleSelectedById","classes","Grid","item","Card","className","clsx","CardActionArea","onClick","CardMedia","component","image","path","replace","title","name","CardContent","Typography","style","whiteSpace","textDisplayStyle","fontFamily","join","generateFabStyle","position","bottom","right","clearFabStyle","ResultDialog","useState","open","setOpen","openTip","setOpenTip","ngaChecked","setNgaChecked","selectOrderChecked","setSelectOrderChecked","returnLinkText","tmpLinkList","linkList","slice","sort","a","b","id","map","link","ngaLink","giteeLink","Grow","in","hasValueInQueue","Fab","variant","color","clearAllSelected","generateLinksFromList","Dialog","keepMounted","onClose","scroll","fullWidth","maxWidth","DialogTitle","Divider","DialogContent","DialogContentText","DialogActions","FormGroup","FormControlLabel","control","Switch","checked","onChange","event","target","label","Tooltip","arrow","disableHoverListener","placement","text","IconButton","disabled","IconGroup","state","iconList","selectedIconList","updateIconList","bind","this","iconJson","tmpIconList","key","push","setState","idx","findIndex","x","newIconList","console","log","index","indexOf","splice","usingNgaLink","inSelectedOrder","newLinkList","nga_path","container","spacing","alignItems","justifyContent","length","Component","types","indexJson","TabPanel","children","value","other","role","hidden","Box","p","a11yProps","theme","createTheme","tab","typography","App","type","loaded","fetch","then","res","json","result","error","ThemeProvider","AppBar","Tabs","newValue","Tab","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab2066f5.chunk.js","sourcesContent":["import { React } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 120,\r\n  },\r\n  iconAdded: {\r\n    backgroundColor: \"#006699\",\r\n  },\r\n  Icon: {\r\n    margin: \"auto\",\r\n    height: 120,\r\n    width: 120,\r\n  },\r\n  iconNameArea: {\r\n    padding: 0,\r\n    height: \"3em\",\r\n  },\r\n  iconName: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    margin: \"auto\",\r\n    textAlign: \"center\",\r\n    fontSize: \"0.85rem\",\r\n    padding: 0,\r\n    fontWeight: 700,\r\n    lineHeight: 1.2,\r\n  },\r\n});\r\n\r\nfunction IconItem(props) {\r\n  const {\r\n    icon,\r\n    uniqueId,\r\n    addToList,\r\n    removeFromList,\r\n    selected,\r\n    toggleSelectedById,\r\n  } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid item>\r\n      <Card className={clsx(classes.root, selected && classes.iconAdded)}>\r\n        <CardActionArea\r\n          onClick={() => {\r\n            if (!selected) {\r\n              //console.log(added, \"added.\");\r\n              toggleSelectedById(uniqueId);\r\n              addToList(uniqueId);\r\n            } else {\r\n              //console.log(added, \"removed.\");\r\n              toggleSelectedById(uniqueId);\r\n              removeFromList(uniqueId);\r\n            }\r\n          }}\r\n        >\r\n          <CardMedia\r\n            className={classes.Icon}\r\n            component=\"img\"\r\n            image={icon.path.replace(\"/s/\", \"/l/\")}\r\n            title={icon.name}\r\n          />\r\n          <CardContent className={classes.iconNameArea}>\r\n            <Typography\r\n              className={classes.iconName}\r\n              style={{ whiteSpace: \"pre-line\" }}\r\n            >\r\n              {icon.name.replace(\"（\", \"\\n（\")}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default IconItem;\r\n","import { React, useState } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport FileDownloadIcon from \"@material-ui/icons/FileDownload\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CopyToClipBoard from \"react-copy-to-clipboard\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { Fade, Grow } from \"@material-ui/core\";\r\n\r\nconst textDisplayStyle = {\r\n  fontFamily: ['\"Noto Sans SC\"', \"sans-serif\"].join(\",\"),\r\n  fontSize: \"1rem\",\r\n  fontWeight: 700,\r\n};\r\n\r\nconst generateFabStyle = {\r\n  position: \"fixed\",\r\n  bottom: \"6rem\",\r\n  right: \"2rem\",\r\n  fontFamily: ['\"Noto Sans SC\"', \"sans-serif\"].join(\",\"),\r\n  fontSize: \"0.85rem\",\r\n  fontWeight: 700,\r\n};\r\n\r\nconst clearFabStyle = {\r\n  position: \"fixed\",\r\n  bottom: \"2rem\",\r\n  right: \"2rem\",\r\n  fontFamily: ['\"Noto Sans SC\"', \"sans-serif\"].join(\",\"),\r\n  fontSize: \"0.85rem\",\r\n  fontWeight: 700,\r\n};\r\n\r\nexport default function ResultDialog(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const [openTip, setOpenTip] = useState(false);\r\n  const [ngaChecked, setNgaChecked] = useState(true);\r\n  const [selectOrderChecked, setSelectOrderChecked] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleCloseTip = () => {\r\n    setOpenTip(false);\r\n  };\r\n\r\n  const handleClickButton = () => {\r\n    setOpenTip(true);\r\n  };\r\n\r\n  const handleNgaSwitchChange = (event) => {\r\n    setNgaChecked(event.target.checked);\r\n  };\r\n\r\n  const handleOrderSwitchChange = (event) => {\r\n    setSelectOrderChecked(event.target.checked);\r\n  };\r\n\r\n  const returnLinkText = (ngaChecked, selectOrderChecked) => {\r\n    var tmpLinkList = props.linkList.slice();\r\n    if (!selectOrderChecked) {\r\n      tmpLinkList.sort((a, b) => (a.id > b.id ? 1 : -1));\r\n    }\r\n    return tmpLinkList\r\n      .map((link) => {\r\n        if (ngaChecked) {\r\n          return link.ngaLink;\r\n        } else {\r\n          return link.giteeLink;\r\n        }\r\n      })\r\n      .join(\"\");\r\n  };\r\n  return (\r\n    <div>\r\n      <Grow in={props.hasValueInQueue}>\r\n        <Fab\r\n          variant=\"extended\"\r\n          color=\"secondary\"\r\n          aria-label=\"clear\"\r\n          onClick={() => {\r\n            props.clearAllSelected();\r\n          }}\r\n          style={generateFabStyle}\r\n        >\r\n          <DeleteForeverIcon />\r\n          清空选择\r\n        </Fab>\r\n      </Grow>\r\n      <Fab\r\n        variant=\"extended\"\r\n        color=\"primary\"\r\n        aria-label=\"generate\"\r\n        onClick={() => {\r\n          handleClickOpen();\r\n          props.generateLinksFromList();\r\n        }}\r\n        style={clearFabStyle}\r\n      >\r\n        <FileDownloadIcon />\r\n        生成图片链接\r\n      </Fab>\r\n      <Dialog\r\n        open={open}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        scroll=\"paper\"\r\n        fullWidth={true}\r\n        maxWidth={\"md\"}\r\n        aria-labelledby=\"result-dialog-slide-title\"\r\n        aria-describedby=\"result-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"result-dialog-slide-title\" style={textDisplayStyle}>\r\n          {\"生成图片链接\"}\r\n        </DialogTitle>\r\n        <Divider />\r\n        <DialogContent>\r\n          <DialogContentText\r\n            id=\"result-dialog-slide-description\"\r\n            style={textDisplayStyle}\r\n          >\r\n            {returnLinkText(ngaChecked, selectOrderChecked)}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <Divider />\r\n        <DialogActions>\r\n          <FormGroup>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  color=\"primary\"\r\n                  checked={ngaChecked}\r\n                  onChange={handleNgaSwitchChange}\r\n                />\r\n              }\r\n              label=\"使用NGA图床\"\r\n            />\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  color=\"primary\"\r\n                  checked={selectOrderChecked}\r\n                  onChange={handleOrderSwitchChange}\r\n                />\r\n              }\r\n              label=\"按照选择顺序生成\"\r\n            />\r\n          </FormGroup>\r\n          <Tooltip\r\n            arrow\r\n            open={openTip}\r\n            onClose={handleCloseTip}\r\n            disableHoverListener\r\n            placement=\"top\"\r\n            title=\"已复制至剪贴板!\"\r\n            style={textDisplayStyle}\r\n          >\r\n            <CopyToClipBoard\r\n              text={returnLinkText(ngaChecked, selectOrderChecked)}\r\n            >\r\n              <IconButton\r\n                disabled={props.linkList === \"\"}\r\n                onClick={handleClickButton}\r\n              >\r\n                <AssignmentIcon />\r\n              </IconButton>\r\n            </CopyToClipBoard>\r\n          </Tooltip>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconItem from \"./iconItem\";\r\nimport ResultDialog from \"./resultDialog\";\r\n\r\nclass IconGroup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      iconList: [],\r\n      selectedIconList: [],\r\n      linkList: [],\r\n    };\r\n    this.updateIconList = this.updateIconList.bind(this);\r\n    this.toggleSelectedById = this.toggleSelectedById.bind(this);\r\n    this.addToList = this.addToList.bind(this);\r\n    this.removeFromList = this.removeFromList.bind(this);\r\n    this.generateLinksFromList = this.generateLinksFromList.bind(this);\r\n    this.clearAllSelected = this.clearAllSelected.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateIconList(this.props.iconJson);\r\n  }\r\n\r\n  updateIconList(iconJson) {\r\n    let tmpIconList = [];\r\n    for (var key in iconJson) {\r\n      let icon = {\r\n        uniqueId: key,\r\n        ...iconJson[key],\r\n        selected: false,\r\n      };\r\n      tmpIconList.push(icon);\r\n    }\r\n    this.setState({ iconList: tmpIconList });\r\n  }\r\n\r\n  toggleSelectedById(uniqueId) {\r\n    let tmpIconList = this.state.iconList;\r\n    let idx = tmpIconList.findIndex((x) => x.uniqueId === uniqueId);\r\n    tmpIconList[idx].selected = !tmpIconList[idx].selected;\r\n\r\n    this.setState({ iconList: tmpIconList });\r\n  }\r\n\r\n  addToList(id) {\r\n    var newIconList = this.state.selectedIconList;\r\n    newIconList.push(id);\r\n    this.setState({ selectedIconList: newIconList });\r\n    console.log(newIconList);\r\n  }\r\n\r\n  removeFromList(id) {\r\n    var newIconList = this.state.selectedIconList;\r\n    var index = newIconList.indexOf(id);\r\n    if (index !== -1) {\r\n      newIconList.splice(index, 1);\r\n    }\r\n    this.setState({ selectedIconList: newIconList });\r\n    console.log(newIconList);\r\n  }\r\n\r\n  generateLinksFromList(usingNgaLink, inSelectedOrder) {\r\n    var iconList = this.state.selectedIconList;\r\n\r\n    var newLinkList = iconList.map((id) => {\r\n      return {\r\n        id: id,\r\n        giteeLink: `[img]${this.props.iconJson[id].path}[/img]`.replace(\r\n          \"./\",\r\n          \"https://sh0wer1ee.gitee.io/dlicons/\"\r\n        ),\r\n        ngaLink: `[img]${this.props.iconJson[id].nga_path}[/img]`,\r\n      };\r\n    });\r\n\r\n    this.setState({ linkList: newLinkList });\r\n  }\r\n\r\n  clearAllSelected() {\r\n    this.updateIconList(this.props.iconJson);\r\n    this.setState({ selectedIconList: [], linkList: [] });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Grid\r\n          container\r\n          spacing={1}\r\n          alignItems=\"flex-start\"\r\n          justifyContent=\"center\"\r\n        >\r\n          {this.state.iconList.map((icon) => (\r\n            <IconItem\r\n              icon={icon}\r\n              key={icon.uniqueId}\r\n              uniqueId={icon.uniqueId}\r\n              selected={icon.selected}\r\n              toggleSelectedById={this.toggleSelectedById}\r\n              addToList={this.addToList}\r\n              removeFromList={this.removeFromList}\r\n            />\r\n          ))}\r\n        </Grid>\r\n        <ResultDialog\r\n          generateLinksFromList={this.generateLinksFromList}\r\n          clearAllSelected={this.clearAllSelected}\r\n          linkList={this.state.linkList}\r\n          hasValueInQueue={\r\n            this.state.selectedIconList.length === 0 ? false : true\r\n          }\r\n        ></ResultDialog>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IconGroup;\r\n","import { React, Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\n//import indexJson from \"./data/index.json\";\r\nimport IconGroup from \"./components/iconGroup\";\r\n\r\nconst types = [\"chara\", \"dragon\", \"weapon\", \"amulet\"];\r\nvar indexJson = {};\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst theme = createTheme({\r\n  tab: {\r\n    fontFamily: ['\"Noto Sans SC\"', \"sans-serif\"].join(\",\"),\r\n    fontSize: \"0.85rem\",\r\n    fontWeight: 700,\r\n  },\r\n  typography: {\r\n    fontFamily: ['\"Noto Sans SC\"', \"sans-serif\"].join(\",\"),\r\n  },\r\n});\r\n\r\nconst textDisplayStyle = {\r\n  fontFamily: ['\"Noto Sans SC\"', \"sans-serif\"].join(\",\"),\r\n  fontSize: \"1rem\",\r\n  fontWeight: 700,\r\n};\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: 0,\r\n\r\n      type: \"chara\",\r\n      loaded: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"./index.json\")\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          indexJson = result;\r\n          this.setState({ loaded: true });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  render() {\r\n    const handleChange = (event, newValue) => {\r\n      this.setState({\r\n        value: newValue,\r\n        type: types[newValue],\r\n      });\r\n    };\r\n\r\n    return (\r\n      this.state.loaded && (\r\n        <ThemeProvider theme={theme}>\r\n          <AppBar position=\"sticky\">\r\n            <Tabs\r\n              value={this.state.value}\r\n              onChange={handleChange}\r\n              aria-label=\"icon tabs\"\r\n            >\r\n              <Tab label=\"角色\" style={textDisplayStyle} {...a11yProps(0)} />\r\n              <Tab label=\"龙\" style={textDisplayStyle} {...a11yProps(1)} />\r\n              <Tab label=\"武器\" style={textDisplayStyle} {...a11yProps(2)} />\r\n              <Tab\r\n                label=\"龙辉护符\"\r\n                style={textDisplayStyle}\r\n                {...a11yProps(4)}\r\n              />\r\n            </Tabs>\r\n          </AppBar>\r\n          <TabPanel value={this.state.value} index={0}>\r\n            <IconGroup\r\n              iconJson={indexJson[\"chara\"]}\r\n              type={this.state.type}\r\n              addToList={this.addToList}\r\n              removeFromList={this.removeFromList}\r\n            />\r\n          </TabPanel>\r\n          <TabPanel value={this.state.value} index={1}>\r\n            <IconGroup\r\n              iconJson={indexJson[\"dragon\"]}\r\n              type={this.state.type}\r\n              addToList={this.addToList}\r\n              removeFromList={this.removeFromList}\r\n            />\r\n          </TabPanel>\r\n          <TabPanel value={this.state.value} index={2}>\r\n            <IconGroup\r\n              iconJson={indexJson[\"weapon\"]}\r\n              type={this.state.type}\r\n              addToList={this.addToList}\r\n              removeFromList={this.removeFromList}\r\n            />\r\n          </TabPanel>\r\n          <TabPanel value={this.state.value} index={3}>\r\n            <IconGroup\r\n              iconJson={indexJson[\"amulet\"]}\r\n              type={this.state.type}\r\n              addToList={this.addToList}\r\n              removeFromList={this.removeFromList}\r\n            />\r\n          </TabPanel>\r\n        </ThemeProvider>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n//import \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}